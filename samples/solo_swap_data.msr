pragma solo.

ensem swapper {

	predicate swap :: (dest,dest,int) -> fact.
	predicate data :: (dest,int) -> fact.

	rule pivotSwap :: swap(X,Y,P), { data(X,D) | D <- Xs. D >= P }, { data(Y,D) | D <- Ys. D < P } 
                             --o { data(Y,D) | D <- Xs }, { data(X,D) | D <- Ys }.

}

execute swapper {

	exists L0, L1.
	swap(L0,L1,100).
	Zs = { 1..100 }.
	Xs = { 2 * X | X <- Zs }.
	Ys = { (2 * Y) - 1 | Y <- Zs }.
	{ data(L0,X) | X <- Xs }.
	{ data(L1,Y) | Y <- Ys }.

}
